/////////////////////////////////////////////////
// Simple regular expression grammar:
// regex -> regex
//        | regex regex
//        | regex +
//        | regex *
//        | expr
//
// expr -> letter
//       | .
//
// letter -> a | b | ... | z | A | B | ... | Z
/////////////////////////////////////////////////

/////////////////////////////////////////////////
// Base case "regex = regex"
a
q0: {'a': [q1]}

// Case "regex = regex regex"
aa
q0: {'a': [q1]}
q1: {'a': [q2]}

// Case "regex = expr +"
a+
q0: {'a': [q1]}
q1: {'a': [q1]}

// Case "regex = expr *"
a*
q0: {'a': [q0]}
/////////////////////////////////////////////////

/////////////////////////////////////////////////
// Case "regex = regex | regex"
(a|b)
q0: {'a': [q1], 'b': [q1]}

// Case "regex = (regex | regex) regex"
(a|b)a
q0: {'a': [q1], 'b': [q1]}
q1: {'a': [q2]}

// Case "regex = (regex | regex) +"
(a|b)+
q0: {'a': [q1], 'b': [q1]}
q1: {'a': [q1], 'b': [q1]}

// Case "regex = (regex | regex) *"
(a|b)*
q0: {'a': [q0], 'b': [q0]}
/////////////////////////////////////////////////

/////////////////////////////////////////////////
// Case "regex = regex + | regex +"
(a+|b+)
q0: {'a': [q1], 'b': [q1]}
q1: {'a': [q1], 'b': [q1]}

// Case "regex = (regex + | regex +) regex"
(a+|b+)a
q0: {'a': [q1], 'b': [q1]}
q1: {'a': [q1, q2], 'b': [q1]}

// Case "regex = (regex + | regex +) +"
(a+|b+)+
q0: {'a': [q1], 'b': [q1]}
q1: {'a': [q1], 'b': [q1]}

// Case "regex = (regex + | regex +) *"
(a+|b+)*
q0: {'a': [q0], 'b': [q0]}
/////////////////////////////////////////////////

/////////////////////////////////////////////////
// For example 
(a|b)*abb
q0: {'a': [q0, q1], 'b': [q0, q1]}
q1: {'b': [q2]}
q2: {'b': [q3]}
/////////////////////////////////////////////////